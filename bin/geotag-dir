#!/usr/bin/env perl

# Take photographs in the given directory hierachy and make links
# based on the place the photograph was taken

# TODO: Only works with JPEGs
# Sometimes Image::MetaData::JPEG can't parse files,
#	in those cases file a bug with the author
#	of that code at https://metacpan.org/pod/Image::MetaData::JPEG

use warnings;
use strict;
use autodie qw(:all);

die "Usage: $0 directory" unless($ARGV[0]);

chdir $ARGV[0];

my @needfull;

# Install Pre-requisites
BEGIN {
	my @modules = (
		'CHI','File::Basename', 'File::Spec', 'File::Util',
		'Geo::Coder::Bing', 'Geo::Coder::Free',
		'Geo::Coder::CA',
		'Geo::Coordinates::DecimalDegrees', 'Image::MetaData::JPEG',
		'Geo::Coder::List', 'Geo::Coder::Free::Local', 'Geo::Coder::Google',
		'Geo::Coder::GooglePlaces', 'Geo::Coder::OSM', 'Geo::Coder::Postcodes',
		'Geo::Coder::XYZ', 'LWP::UserAgent::Throttled'
	);

	foreach my $module(@modules) {
		eval "use $module";
		if($@) {
			# Install module dependancies
			if($module =~ /(.+)\s/) {
				# Specific version not satisfied
				push @needfull, $1;
			} else {
				push @needfull, $module;
			}
		}
	}
	if(scalar(@needfull)) {
		my $list = join(' ', @needfull);
		print "Installing $list\n";
		# system("cpan -i $list");
		# require 'CPAN';
		# CPAN->import();
		# CPAN::Shell->install(@needfull);
		system('perl -MCPAN -e \'CPAN::Shell->install("' . join('", "', @needfull) . '")\'');
	}

	# FIXME
	$SIG{__WARN__} = sub {
		my $warning = shift;
		if(($warning =~ /^Use of uninitialized value/) ||
		   ($warning =~ /isn't numeric in numeric eq /i)) {
			die $warning;
		}
		warn $warning;
	};
}

foreach my $module(@needfull) {
	my $version;
	if($module =~ /(.+)\s(.+)$/) {
		$module = $1;
		$version = $2;
	}
	if($module =~ /.+\/(.+)/) {
		$module = $1;
	}
	$module =~ s/\-/::/g;
	$module =~ s/\.tar\.gz$//;
	eval "require $module";
	if($@) {
		die $@;
	}
	$module->import();
	# if($version && ($module::VERSION < $version)) {
		# die "$module: need $version got ", $module::VERSION;
	# }
}

my $cachedir;
if(my $e = $ENV{'CACHEDIR'}) {
	$cachedir = File::Spec->catfile($e, basename($0));
} else {
	$cachedir = File::Spec->catfile(File::Spec->tmpdir(), 'cache', basename($0));
}
my $geocoder = Geo::Coder::List->new(cache => CHI->new(driver => 'File', root_dir => $cachedir))
	->push(Geo::Coder::Free::Local->new());

my $freegeocoder;

# if(my $oa = $ENV{'OPENADDR_HOME'}) {
# Reverse geocode of Openaddr not supported
if(0) {
	my $oa; #<<<<<<<<<<<<
	$freegeocoder = Geo::Coder::Free->new(openaddr => $oa);
	# $geocoder->push({ regex => qr/,[\w\s]+,[\w\s]+$/, geocoder => $freegeocoder });
	# $geocoder->push({ regex => qr/,\s*(USA|US|United States|Canada|Australia)+$/, geocoder => Geo::Coder::Free::OpenAddresses->new(openaddr => $oa) })
		# ->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => Geo::Coder::Free->new() });
	# US, Canada and Australia are full
	# Counties and towns in the UK are full
	$geocoder->push({ regex => qr/,\s*(USA|US|United States|Canada|Australia)\s*$/, geocoder => $freegeocoder })
		->push({ regex => qr/^([\w\s]+,)?\s*[\w\s]+,\s*[\w\s]+\s*$/, geocoder => $freegeocoder });
} else {
	# $freegeocoder = Geo::Coder::Free->new();
	$freegeocoder = Geo::Coder::Free::MaxMind->new();
	$geocoder->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => $freegeocoder })
		# E.g. 'Nebraska, USA'
		->push({ regex => qr/^[\w\s]+,\s*(UK|England|Canada|USA|US|United States)$/i, geocoder => $freegeocoder });
}

my $geolocation_key;
if($ENV{'GMAP_KEY'}) {	# Compatibility with various CPAN modules
	$geolocation_key = $ENV{'GMAP_KEY'};
}
if($geolocation_key) {
	my %gp_args = (apiver => 3);
	$gp_args{'key'} = $geolocation_key;
	$gp_args{'api_key'} = $geolocation_key;

	$geocoder->push({ limit => 100, regex => qr/(Canada|USA|US|United States)$/i, geocoder => Geo::Coder::CA->new() })
		->push(Geo::Coder::OSM->new())
		->push({ regex => qr/^[\w\s-]+,\s*[\w\s]+,\s*(UK|United Kingdom|England|Wales)$/i, geocoder => Geo::Coder::Postcodes->new() })
		->push({ limit => 100, geocoder => Geo::Coder::GooglePlaces->new(%gp_args) })
		->push({ limit => 200, geocoder => Geo::Coder::XYZ->new()})
		->push(Geo::Coder::Google->new());
} else {
	$geocoder->push({ limit => 100, regex => qr/(Canada|USA|US|United States)$/i, geocoder => Geo::Coder::CA->new() })
		->push({ regex => qr/^[\w\s-]+,\s*[\w\s]+,\s*(UK|United Kingdom|England|Wales)$/i, geocoder => Geo::Coder::Postcodes->new() })
		->push(Geo::Coder::OSM->new())
		# ->push({ limit => 200, geocoder => Geo::Coder::XYZ->new()})
		# ->push(Geo::Coder::Google->new())
		# ->push(Geo::Coder::GooglePlaces->new());
}
if(my $key = $ENV{BMAP_KEY}) {
	$geocoder->push(Geo::Coder::Bing->new(key => $key));
}

my $ua = LWP::UserAgent::Throttled->new(agent => 'ged2site', keep_alive => 1);
$ua->env_proxy(1);

# TODO: throttle other geocoders
$ua->throttle({
	'nominatim.openstreetmap.org' => 1,
	'geocode.xyz' => 2,
	'geocoder.ca' => 1,
	'api.postcodes.io' => 1,
	'where.desktop.mos.svc.ovi.com' => 1,
	'geocoding.geo.census.gov' => 1,
	'a2ageo.rmservers.com' => 1,
	'dev.virtualearth.net' => 1,	# Bing
	'api.geonames.org' => 1,
	'yboss.yahooapis.com' => 1,	# Geo::Coder::PlaceFinder
});

# G::C::GooglePlaces
$ua->throttle({ 'maps.googleapis.com' => 0.1 }) unless($geolocation_key);
$ua->ssl_opts(verify_hostname => 0);	# prevent "Can't connect to geocode.xyz:443 (certificate verify failed)"
$geocoder->ua($ua);

# Geo::Coder::PlaceFinder doesn't support the ua() method
if((my $ckey = $ENV{'YAHOO_CONSUMER'}) && (my $skey = $ENV{'YAHOO_SECRET'})) {
	$geocoder->push(Geo::Coder::PlaceFinder->new(consumer_key => $ckey, secret_key => $skey, ua => $ua));
}

my @sources = File::Util->new()->list_dir('.' => {
	files_only => 1,
	recurse => 1,
});

foreach(@sources) {
	doit($_);
}

sub doit {
	my $file = shift;

	return unless($file =~ /\.jpe?g$/i);

	if(my $image = Image::MetaData::JPEG->new($file)) {
		my $data = $image->get_Exif_data('GPS_DATA');

		return unless(defined($data->{'GPSLatitude'}));

		my @lat = @{$data->{'GPSLatitude'}};
		my $latNS = @{$data->{'GPSLatitudeRef'}}[0];
		my @long = @{$data->{'GPSLongitude'}};
		my $longEW = @{$data->{'GPSLongitudeRef'}}[0];

		my $degrees = $lat[0] / $lat[1];
		my $minutes = $lat[2] / $lat[3];
		my $seconds = $lat[4] / $lat[5];

		my $latitude = dms2decimal($degrees,$minutes,$seconds);
		if($latNS eq 'S') {
			$latitude *= -1;
		}
		# print "$file: $latitude,";

		$degrees = $long[0] / $long[1];
		if($longEW eq 'W') {
			$degrees *= -1;
		}
		$minutes = $long[2] / $long[3];
		$seconds = $long[4] / $long[5];
		my $longitude = dms2decimal($degrees,$minutes,$seconds);
		if($longEW =~ /^W/) {
			$longitude *= -1;
		}
		# print "$longitude\n";

		if(my $location = $geocoder->reverse_geocode(latlng => "$latitude,$longitude")) {
			# print "\t$location\n";

			my @dirs = reverse split(/, /, $location);
			next unless scalar(@dirs) >= 3;
			my $breadcrumb = '.';
			foreach my $dir(@dirs[0..2]) {
				my $d = File::Spec->catfile($breadcrumb, $dir);
				if(!-d $d) {
					print "Making $d\n";
					mkdir $d;
				}
				$breadcrumb = $d;
			}
			foreach my $dir(split(/\//, dirname($file))) {
				my $d = File::Spec->catfile($breadcrumb, $dir);
				if(!-d $d) {
					print "Making $d\n";
					mkdir $d;
				}
				$breadcrumb = $d;
			}
			my $dest = File::Spec->catfile($breadcrumb, basename($file));
			if(!-r $dest) {
				print "linking $file to $dest\n";
				link $file, $dest;
			}
		}
	} else {
		die "$file: ", Image::MetaData::JPEG::Error();
	}
}
