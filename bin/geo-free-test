#!/usr/bin/env perl

# Use Geo::Coder::Free to see if the locations in a gedcom are known
# Needs to be run in the same directory as the gedcom program resides

use warnings;
use strict;
use autodie qw(:all);

use Getopt::Std;
use Geo::Coder::Free;
use Geo::Coder::Free::Local;

die "Usage: $0 [ -v ] gedcom-file" unless($ARGV[0]);
die 'Set OPENADDR_HOME to enable testing' unless($ENV{'OPENADDR_HOME'});

my %opts;
getopts('v', \%opts);
Geo::Coder::Free::DB::init(logger => MyLogger->new()) if($opts{'v'});

my $g = Geo::Coder::Free->new();
my $o = Geo::Coder::Free::OpenAddresses->new(openaddr => $ENV{'OPENADDR_HOME'});
my $l = Geo::Coder::Free::Local->new();

open(my $fin, '-|', "./gedcom -T \"$ARGV[0]\"");

while(my $line = <$fin>) {
	next if($line =~ /\d%/);

	my ($place, $people) = split(/:\s/, $line);
	next unless($people);
	chomp $people;

	run($place, $people);
}

sub run {
	my ($place, $people) = @_;

	return unless($place =~ /(Canada|US|USA|United States|Australia|England)$/i);

	eval {
		if(my $rc = $l->geocode($place)) {
			# print "$place: ", $rc->lat(), '/', $rc->long(), "\n";
		} elsif($rc = $g->geocode($place)) {
			print "$place: ", $rc->lat(), '/', $rc->long(), "\n";
		# } elsif($rc = $o->geocode($place)) {
			print "$place: ", $rc->lat(), '/', $rc->long(), "\n";
		} else {
			# # print "$place failed\n\t$people\n";
		}
	};
	if($@) {
		print "$place: $@";
	}
}

package MyLogger;

sub new {
	my ($proto, %args) = @_;

	my $class = ref($proto) || $proto;

	return bless { }, $class;
}

sub trace {
	debug(@_);
}

sub warn {
	debug(@_);
}

sub debug {
	my $self = shift;

	print @_, "\n";
}

sub AUTOLOAD {
	our $AUTOLOAD;
	my $param = $AUTOLOAD;

	unless($param eq 'MyLogger::DESTROY') {
		die "Need to define $param\n";
	}
}

1;
