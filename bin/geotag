#!/usr/bin/env perl

# Print where photographs were taken by looking at the geotag and reverse geocoding

use warnings;
use strict;
use autodie qw(:all);

use CHI;
use File::Basename;
use File::Spec;
use Geo::Coordinates::DecimalDegrees;
use Geo::Coder::Bing;
use Geo::Coder::CA;
use Geo::Coder::List;
use Geo::Coder::Free;
use Geo::Coder::Free::Local;
use Geo::Coder::Google;
use Geo::Coder::GooglePlaces;
use Geo::Coder::OSM;
use Geo::Coder::Ovi;
use Geo::Coder::Postcodes;
use Geo::Coder::XYZ;
use Image::MetaData::JPEG;
use LWP::UserAgent::Throttled;

foreach(@ARGV) {
	doit($_);
}

sub doit {
	my $file = shift;

	if(my $image = Image::MetaData::JPEG->new($file)) {
		my $data = $image->get_Exif_data('GPS_DATA');

		return unless(defined($data->{'GPSLatitude'}));

		my @lat = @{$data->{'GPSLatitude'}};
		my $latNS = @{$data->{'GPSLatitudeRef'}}[0];
		my @long = @{$data->{'GPSLongitude'}};
		my $longEW = @{$data->{'GPSLongitudeRef'}}[0];

		my $degrees = $lat[0] / $lat[1];
		my $minutes = $lat[2] / $lat[3];
		my $seconds = $lat[4] / $lat[5];

		my $latitude = dms2decimal($degrees,$minutes,$seconds);
		if($latNS eq 'S') {
			$latitude *= -1;
		}
		print $file, ": $latitude,";

		$degrees = $long[0] / $long[1];
		if($longEW eq 'W') {
			$degrees *= -1;
		}
		$minutes = $long[2] / $long[3];
		$seconds = $long[4] / $long[5];
		my $longitude = dms2decimal($degrees,$minutes,$seconds);
		if($longEW =~ /^W/) {
			$longitude *= -1;
		}
		print "$longitude\n";

		# TODO, reverse geocode to print the location
		if(1) {
			my $cachedir;
			if(my $e = $ENV{'CACHEDIR'}) {
				$cachedir = File::Spec->catfile($e, basename($0));
			} else {
				$cachedir = File::Spec->catfile(File::Spec->tmpdir(), 'cache', basename($0));
			}
			my $geocoder = Geo::Coder::List->new(cache => CHI->new(driver => 'File', root_dir => $cachedir));
			my $freegeocoder;

			# if(my $oa = $ENV{'OPENADDR_HOME'}) {
			# Reverse geocode of Openaddr not supported
			if(0) {
				my $oa; #<<<<<<<<<<<<
				$freegeocoder = Geo::Coder::Free->new(openaddr => $oa);
				# $geocoder->push({ regex => qr/,[\w\s]+,[\w\s]+$/, geocoder => $freegeocoder });
				# $geocoder->push({ regex => qr/,\s*(USA|US|United States|Canada|Australia)+$/, geocoder => Geo::Coder::Free::OpenAddresses->new(openaddr => $oa) })
					# ->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => Geo::Coder::Free->new() });
				# US, Canada and Australia are full
				# Counties and towns in the UK are full
				$geocoder->push({ regex => qr/,\s*(USA|US|United States|Canada|Australia)\s*$/, geocoder => $freegeocoder })
					->push({ regex => qr/^([\w\s]+,)?\s*[\w\s]+,\s*[\w\s]+\s*$/, geocoder => $freegeocoder });
			} else {
				# $freegeocoder = Geo::Coder::Free->new();
				$freegeocoder = Geo::Coder::Free::MaxMind->new();
				$geocoder->push({ regex => qr/^[\w\s\-]+?,[\w\s]+,[\w\s]+?$/, geocoder => $freegeocoder })
					# E.g. 'Nebraska, USA'
					->push({ regex => qr/^[\w\s]+,\s*(UK|England|Canada|USA|US|United States)$/i, geocoder => $freegeocoder });
			}
			$geocoder->push({ regex => qr/^[\w\s]+,\s*[\w\s],\s*(UK|England|Wales|Scotland)$/i, geocoder => $freegeocoder })
				->push(Geo::Coder::Free::Local->new());

			my $geolocation_key;
			if($ENV{'GMAP_KEY'}) {	# Compatibility with various CPAN modules
				$geolocation_key = $ENV{'GMAP_KEY'};
			}
			if($geolocation_key) {
				my %gp_args = (apiver => 3);
				$gp_args{'key'} = $geolocation_key;
				$gp_args{'api_key'} = $geolocation_key;

				$geocoder->push({ limit => 100, regex => qr/(Canada|USA|US|United States)$/i, geocoder => Geo::Coder::CA->new() })
					->push(Geo::Coder::OSM->new())
					->push({ regex => qr/^[\w\s-]+,\s*[\w\s]+,\s*(UK|United Kingdom|England|Wales)$/i, geocoder => Geo::Coder::Postcodes->new() })
					->push(Geo::Coder::Ovi->new())
					->push({ limit => 100, geocoder => Geo::Coder::GooglePlaces->new(%gp_args) })
					->push({ limit => 200, geocoder => Geo::Coder::XYZ->new()})
					->push(Geo::Coder::Google->new());
			} else {
				$geocoder->push({ limit => 100, regex => qr/(Canada|USA|US|United States)$/i, geocoder => Geo::Coder::CA->new() })
					->push({ regex => qr/^[\w\s-]+,\s*[\w\s]+,\s*(UK|United Kingdom|England|Wales)$/i, geocoder => Geo::Coder::Postcodes->new() })
					->push(Geo::Coder::OSM->new())
					# ->push({ limit => 200, geocoder => Geo::Coder::XYZ->new()})
					->push(Geo::Coder::Ovi->new());
					# ->push(Geo::Coder::Google->new())
					# ->push(Geo::Coder::GooglePlaces->new());
			}
			if(my $key = $ENV{BMAP_KEY}) {
				$geocoder->push(Geo::Coder::Bing->new(key => $key));
			}

			my $ua = LWP::UserAgent::Throttled->new(agent => 'ged2site', keep_alive => 1);
			$ua->env_proxy(1);

			# TODO: throttle other geocoders
			$ua->throttle({
				'nominatim.openstreetmap.org' => 1,
				'geocode.xyz' => 2,
				'geocoder.ca' => 1,
				'api.postcodes.io' => 1,
				'where.desktop.mos.svc.ovi.com' => 1,
				'geocoding.geo.census.gov' => 1,
				'a2ageo.rmservers.com' => 1,
				'dev.virtualearth.net' => 1,	# Bing
				'api.geonames.org' => 1,
				'yboss.yahooapis.com' => 1,	# Geo::Coder::PlaceFinder
			});

			# G::C::GooglePlaces
			$ua->throttle({ 'maps.googleapis.com' => 0.1 }) unless($geolocation_key);
			$ua->ssl_opts(verify_hostname => 0);	# prevent "Can't connect to geocode.xyz:443 (certificate verify failed)"
			$geocoder->ua($ua);

			# Geo::Coder::PlaceFinder doesn't support the ua() method
			if((my $ckey = $ENV{'YAHOO_CONSUMER'}) && (my $skey = $ENV{'YAHOO_SECRET'})) {
				$geocoder->push(Geo::Coder::PlaceFinder->new(consumer_key => $ckey, secret_key => $skey, ua => $ua));
			}

			if(my $location = $geocoder->reverse_geocode(latlng => "$latitude,$longitude")) {
				print "\t$location\n";
			}
		}
	} else {
		die "file: ", Image::MetaData::JPEG::Error();
	}
}
