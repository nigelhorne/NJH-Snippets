#!/usr/bin/env perl

# Debian
# DBD::CSV => libdbd-csv-perl
# IO:AIO => libio-aio-perl
# Parallel::ForkManager => libparallel-forkmanager-perl
# Sendmail::PMilter => libsendmail-pmilter-perl
# Sendmail::Milter => libmail-sendmail-perl
# Test::Needs => libtest-needs-perl
# Test::Most => libtest-most-perl
# XML::Twig => libxml-twig-perl
# HTML::TreeBuilder::XPath => libhtml-treebuilder-xpath-perl

# Alpine
# CHI => perl-chi
# Parallel::ForkManager => perl-parallel-forkmanager
# Test::DescribeMe => perl-test-describeme
# Test::MockModule => perl-test-mockmodule
# Test::MockObject => perl-test-mockobject
# Test::RequiresInternet => perl-test-requiresinternet
# XML::Parser => perl-xml-parser
# XML::Simple => perl-xml-simple

# FreeBSD
# IO::Socket::SSL => p5-IO-Socket-SSL
# Mozilla::CA => p5-Mozilla-CA
# Net::SSLeay: p5-Net-SSLeay
# Parallel::ForkManager => p5-Parallel-ForkManager
# URI: p5-URI
# XML::Parser => p5-XML-Parser

# OpenBSD
# XML::Parser => p5-XML-Parser

use strict;
use warnings;

use autodie qw(:all);
use Data::Dumper;
use File::Slurp;
use File::Temp;

my ($fh, $filename) = File::Temp::tempfile();

system("scandeps.pl -R lib/CGI/Info.pm > $filename");

my $config = eval('{' . File::Slurp::read_file($filename) . '}');

close $fh;
unlink $filename;

print Data::Dumper->new([$config])->Dump();
